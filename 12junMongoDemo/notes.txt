
- logical and comparison operators ($lt, $and) - note, to do range spec both $gt and $lt
- sorting on a field (.sort({"field":1 || -1})
- $regex
- excluding / fields (one or the other)
- $lookup
- project (also calculated fields) ( separate from pipeline)
- aggregation pipelines
    - $match
    - $unwind - deconstruct arrays
    - $group
    - $first/$last (ie lowScore: {$first: '$grades.score'})
    $average



db.collectionName.aggregate([
    { $unwind: "$scores" },
    { $group: { _id: "$_id", avgScore: { $avg: "$scores" } } },
    { $sort: { avgScore: -1 } },
    { $limit: 1 }
])


db.products.find( { name: { $regex: /book/ } } )

db.collection.aggregate([
   {
      $project: {
         _id: 0,
         title: 1,
         calculatedField: { $multiply: [ "$field1", "$field2" ] }
      }
   }
])

db.restaurants.aggregate([
    { $unwind: "$grades" },
    { $group: { _id: "$name", avgScore: { $avg: "$grades.score" } } },
    { $match: { avgScore: { $gt: 75 } } },
    { $sort: { avgScore: 1 } },
    { $project: { name: "$_id", _id: 0 } }
])
